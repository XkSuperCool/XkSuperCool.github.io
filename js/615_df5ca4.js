(self.webpackChunkki_ui=self.webpackChunkki_ui||[]).push([[615],{9615:(s,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>os});var l=n(6252),t=n(3577),e=(0,l.uE)('<h1>VirtualComponents</h1><p>虚拟组件, 当数据量比较大时, 使用它会比较流畅.</p><h2>安装</h2><p>vue3</p><pre><code class="language-js">$ npm i tj-virtual-components\n\nor\n\n$ yarn add tj-virtual-components\n\nor\n\n$ pnpm add tj-virtual-components\n</code></pre><p>vue2</p><pre><code class="language-js">$ npm i tj-virtual-components @vue/composition-api\n\nor\n\n$ yarn add tj-virtual-components @vue/composition-api\n\nor\n\n$ pnpm add tj-virtual-components @vue/composition-api\n</code></pre><h2>使用</h2><pre><code class="language-js"><span class="hljs-keyword">import</span> { VirtualTree } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;tj-virtual-components&#39;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;tj-virtual-components/lib/style.css&#39;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">components</span>: {\n    VirtualTree,\n  },\n};\n</code></pre><p>也可以全局引用</p><pre><code class="language-js"><span class="hljs-comment">// main.js</span>\n<span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;vue&#39;</span>;\n<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./App.vue&#39;</span>;\n\n<span class="hljs-keyword">import</span> VirtualComponents <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;tj-virtual-components&#39;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">&#39;tj-virtual-components/lib/style.css&#39;</span>;\n\n<span class="hljs-keyword">new</span> createApp(App).use(VirtualComponents).mount(<span class="hljs-string">&#39;#app&#39;</span>);\n</code></pre><blockquote><p>注意: 全局使用时组件会增加 TJ 前缀, 也就是 &lt;TJVirtualTree /&gt;</p></blockquote><h2>VirtualTree</h2><p>虚拟树形组件</p><h3>基础用法</h3><p>基础树形结构展示.</p>',16),r=(0,l._)("pre",null,[(0,l._)("code",{class:"language-html"},[(0,l.Uk)("  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":visibleCount"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"10"'),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":data"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"data"'),(0,l.Uk)(" />")]),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l._)("span",{class:"javascript"},[(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" createTreeData = "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},[(0,l.Uk)("\n      maxDeep,\n      maxChildren,\n      minNodesNumber,\n      deep = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(",\n      key = "),(0,l._)("span",{class:"hljs-string"},"'node'"),(0,l.Uk)(",\n    ")]),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" id = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(";\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-built_in"},"Array"),(0,l.Uk)("(minNodesNumber).fill(deep).map("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" childrenNumber =\n          deep === maxDeep ? "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".round("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * maxChildren)\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" nodeKey = "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${key}"),(0,l.Uk)("-"),(0,l._)("span",{class:"hljs-subst"},"${id++}"),(0,l.Uk)("`")]),(0,l.Uk)(";\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"children"),(0,l.Uk)(": childrenNumber\n            ? createTreeData(maxDeep, maxChildren, childrenNumber, deep + "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", nodeKey)\n            : "),(0,l._)("span",{class:"hljs-literal"},"undefined"),(0,l.Uk)(",\n        }\n      })\n    };  \n    \n    "),(0,l._)("span",{class:"hljs-keyword"},"export"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"default"),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"data"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(")")]),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"data"),(0,l.Uk)(": createTreeData("),(0,l._)("span",{class:"hljs-number"},"3"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"30"),(0,l.Uk)(",  "),(0,l._)("span",{class:"hljs-number"},"40"),(0,l.Uk)("),\n        };\n      },\n    }\n  ")]),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l.Uk)("\n")])],-1),d=(0,l._)("h3",null,"可选择的虚拟树",-1),c=(0,l._)("p",null,[(0,l.Uk)("使用 "),(0,l._)("code",null,"checkbox"),(0,l.Uk)(" 选择树节点.")],-1),p=(0,l._)("pre",null,[(0,l._)("code",{class:"language-html"},[(0,l.Uk)("  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":visibleCount"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"10"'),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"show-checkbox"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":data"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"data"'),(0,l.Uk)(" />")]),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l._)("span",{class:"javascript"},[(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" createTreeData = "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},[(0,l.Uk)("\n      maxDeep,\n      maxChildren,\n      minNodesNumber,\n      deep = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(",\n      key = "),(0,l._)("span",{class:"hljs-string"},"'node'"),(0,l.Uk)(",\n    ")]),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" id = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(";\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-built_in"},"Array"),(0,l.Uk)("(minNodesNumber).fill(deep).map("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" childrenNumber =\n          deep === maxDeep ? "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".round("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * maxChildren)\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" nodeKey = "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${key}"),(0,l.Uk)("-"),(0,l._)("span",{class:"hljs-subst"},"${id++}"),(0,l.Uk)("`")]),(0,l.Uk)(";\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"children"),(0,l.Uk)(": childrenNumber\n            ? createTreeData(maxDeep, maxChildren, childrenNumber, deep + "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", nodeKey)\n            : "),(0,l._)("span",{class:"hljs-literal"},"undefined"),(0,l.Uk)(",\n        }\n      })\n    };  \n    \n    "),(0,l._)("span",{class:"hljs-keyword"},"export"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"default"),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"data"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(")")]),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"data"),(0,l.Uk)(": createTreeData("),(0,l._)("span",{class:"hljs-number"},"3"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"30"),(0,l.Uk)(",  "),(0,l._)("span",{class:"hljs-number"},"40"),(0,l.Uk)("),\n        };\n      },\n    }\n  ")]),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l.Uk)("\n")])],-1),h=(0,l._)("h3",null,"默认展开和默认选中",-1),k=(0,l._)("p",null,[(0,l.Uk)("可以设置初始的展开节点和选中节点, 传递 "),(0,l._)("code",null,"default-expanded-keys"),(0,l.Uk)(" 和 "),(0,l._)("code",null,"default-checked-keys"),(0,l.Uk)(" 到 "),(0,l._)("code",null,"props"),(0,l.Uk)(" 即可.")],-1),o=(0,l._)("pre",null,[(0,l._)("code",{class:"language-html"},[(0,l.Uk)("  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},"show-checkbox"),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},":visibleCount"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"10"'),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},":default-expanded-keys"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},"\"['node-1', 'node-2']\""),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},":default-checked-keys"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},"\"['node-1']\""),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-attr"},":data"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"data"'),(0,l.Uk)("\n    />")]),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l._)("span",{class:"javascript"},[(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" createTreeData = "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},[(0,l.Uk)("\n      maxDeep,\n      maxChildren,\n      minNodesNumber,\n      deep = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(",\n      key = "),(0,l._)("span",{class:"hljs-string"},"'node'"),(0,l.Uk)(",\n    ")]),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" id = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(";\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-built_in"},"Array"),(0,l.Uk)("(minNodesNumber).fill(deep).map("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" childrenNumber =\n          deep === maxDeep ? "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".round("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * maxChildren)\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" nodeKey = "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${key}"),(0,l.Uk)("-"),(0,l._)("span",{class:"hljs-subst"},"${id++}"),(0,l.Uk)("`")]),(0,l.Uk)(";\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"children"),(0,l.Uk)(": childrenNumber\n            ? createTreeData(maxDeep, maxChildren, childrenNumber, deep + "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", nodeKey)\n            : "),(0,l._)("span",{class:"hljs-literal"},"undefined"),(0,l.Uk)(",\n        }\n      })\n    };  \n    \n    "),(0,l._)("span",{class:"hljs-keyword"},"export"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"default"),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"data"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(")")]),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"data"),(0,l.Uk)(": createTreeData("),(0,l._)("span",{class:"hljs-number"},"3"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"30"),(0,l.Uk)(",  "),(0,l._)("span",{class:"hljs-number"},"40"),(0,l.Uk)("),\n        };\n      },\n    }\n  ")]),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l.Uk)("\n")])],-1),i=(0,l._)("h3",null,"自定义节点渲染",-1),_=(0,l._)("p",null,"使用 slot 自定义渲染树节点.",-1),U=(0,l._)("div",null,[(0,l._)("p",null,[(0,l._)("code",null,"slot-scoped"),(0,l.Uk)(" 中获取到的 "),(0,l._)("code",null,"node"),(0,l.Uk)(" 是组件内部维护的一份, 如果想要获取原数据可以通过 "),(0,l._)("code",null,"node.raw"),(0,l.Uk)(" 获得 .")])],-1),u={class:"language-html"},j=(0,l.Uk)("  "),m=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")],-1),b=(0,l.Uk)("\n    "),y=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":visibleCount"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"10"'),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"show-checkbox"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":data"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"data"'),(0,l.Uk)(">")],-1),g=(0,l.Uk)("\n      "),f=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(" #"),(0,l._)("span",{class:"hljs-attr"},"default"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"{ node }"'),(0,l.Uk)(">")],-1),w=(0,l.Uk)("\n        "),v=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"style"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"width: 100%; display: flex; justify-content: space-between"'),(0,l.Uk)(">")],-1),x=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"style"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"opacity: 0"'),(0,l.Uk)(">")],-1),N=(0,l.Uk)("node.label"),T=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(">")],-1),D=(0,l.Uk)("\n          "),C=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"style"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"font-size: 14px; margin-right: 10px;"'),(0,l.Uk)(">")],-1),K=(0,l.Uk)("\n            "),M=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"a"),(0,l.Uk)(">")],-1),V=(0,l.Uk)("编辑"),E=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"a"),(0,l.Uk)(">")],-1),$=(0,l.Uk)("\n            "),W=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"a"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"style"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"color: #ed5a65; margin-left: 10px;"'),(0,l.Uk)(">")],-1),O=(0,l.Uk)("删除"),A=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"a"),(0,l.Uk)(">")],-1),J=(0,l.Uk)("\n          "),P=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(">")],-1),S=(0,l.Uk)("\n        "),z=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(">")],-1),B=(0,l.Uk)("\n      "),H=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")],-1),L=(0,l.Uk)("\n    "),q=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)(">")],-1),F=(0,l.Uk)("\n  "),G=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")],-1),I=(0,l.Uk)("\n\n  "),Q=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")],-1),R=(0,l._)("span",{class:"javascript"},[(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" createTreeData = "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},[(0,l.Uk)("\n      maxDeep,\n      maxChildren,\n      minNodesNumber,\n      deep = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(",\n      key = "),(0,l._)("span",{class:"hljs-string"},"'node'"),(0,l.Uk)(",\n    ")]),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" id = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(";\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-built_in"},"Array"),(0,l.Uk)("(minNodesNumber).fill(deep).map("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" childrenNumber =\n          deep === maxDeep ? "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".round("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * maxChildren)\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" nodeKey = "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${key}"),(0,l.Uk)("-"),(0,l._)("span",{class:"hljs-subst"},"${id++}"),(0,l.Uk)("`")]),(0,l.Uk)(";\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"children"),(0,l.Uk)(": childrenNumber\n            ? createTreeData(maxDeep, maxChildren, childrenNumber, deep + "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", nodeKey)\n            : "),(0,l._)("span",{class:"hljs-literal"},"undefined"),(0,l.Uk)(",\n        }\n      })\n    };  \n    \n    "),(0,l._)("span",{class:"hljs-keyword"},"export"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"default"),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"data"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(")")]),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"data"),(0,l.Uk)(": createTreeData("),(0,l._)("span",{class:"hljs-number"},"3"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"30"),(0,l.Uk)(",  "),(0,l._)("span",{class:"hljs-number"},"40"),(0,l.Uk)("),\n        };\n      },\n    }\n  ")],-1),X=(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")],-1),Y=(0,l.Uk)("\n"),Z=(0,l._)("h3",null,"懒加载数据",-1),ss=(0,l._)("p",null,"当树节点需要异步请求时获取使用.",-1),as=(0,l._)("div",null,[(0,l._)("p",null,[(0,l.Uk)("使用懒加载时, 必须给节点数据提供一个 "),(0,l._)("code",null,"loading"),(0,l.Uk)(" 用于标识是否可以进行懒加载子节点. 也可以自定义这个属性的名称, 详情看下方的 "),(0,l._)("code",null,"props"),(0,l.Uk)(".")])],-1),ns=(0,l._)("pre",null,[(0,l._)("code",{class:"language-html"},[(0,l.Uk)("  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":visibleCount"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"10"'),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},":load"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"load"'),(0,l.Uk)(" />")]),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l._)("span",{class:"javascript"},[(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" id = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(";\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" createTreeData = "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},[(0,l.Uk)("\n      maxDeep,\n      maxChildren,\n      minNodesNumber,\n      isLoad = "),(0,l._)("span",{class:"hljs-literal"},"false"),(0,l.Uk)(",\n      deep = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(",\n      key = "),(0,l._)("span",{class:"hljs-string"},"'node'"),(0,l.Uk)(",\n    ")]),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-built_in"},"Array"),(0,l.Uk)("(minNodesNumber).fill(deep).map("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" childrenNumber =\n          deep === maxDeep ? "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".round("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * maxChildren)\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" nodeKey = "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${key}"),(0,l.Uk)("-"),(0,l._)("span",{class:"hljs-subst"},"${id++}"),(0,l.Uk)("`")]),(0,l.Uk)(";\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"loading"),(0,l.Uk)(": isLoad ? !!"),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".floor("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * "),(0,l._)("span",{class:"hljs-number"},"2"),(0,l.Uk)(") : "),(0,l._)("span",{class:"hljs-literal"},"false"),(0,l.Uk)(",\n          "),(0,l._)("span",{class:"hljs-attr"},"children"),(0,l.Uk)(": childrenNumber\n            ? createTreeData(maxDeep, maxChildren, childrenNumber, isLoad, deep + "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", nodeKey)\n            : "),(0,l._)("span",{class:"hljs-literal"},"undefined"),(0,l.Uk)(",\n        }\n      })\n    };  \n    \n    "),(0,l._)("span",{class:"hljs-keyword"},"export"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"default"),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-attr"},"methods"),(0,l.Uk)(": {\n        "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"load"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},"node, resolve"),(0,l.Uk)(")")]),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-keyword"},"if"),(0,l.Uk)(" (node.level === "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(") {\n            "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" resolve(createTreeData("),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"40"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)("));\n          }\n          \n          "),(0,l._)("span",{class:"hljs-built_in"},"setTimeout"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n            resolve(createTreeData("),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"1000"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-literal"},"true"),(0,l.Uk)("));\n          }, "),(0,l._)("span",{class:"hljs-number"},"2000"),(0,l.Uk)(");\n        }\n      },\n    }\n  ")]),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l.Uk)("\n")])],-1),ls=(0,l._)("h3",null,"插入节点",-1),ts=(0,l._)("p",null,[(0,l.Uk)("当子节点数据过多, 需要多次请求然后获取子节点数据时, 可以使用插入节点方案, 这样可以快速的让页面得到更新, 而无需组合所有数据进行 "),(0,l._)("code",null,"setData"),(0,l.Uk)(".")],-1),es=(0,l._)("pre",null,[(0,l._)("code",{class:"language-html"},[(0,l.Uk)("  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(">")]),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"ki-button"),(0,l.Uk)(" @"),(0,l._)("span",{class:"hljs-attr"},"click"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"insert"'),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"type"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"primary"'),(0,l.Uk)(),(0,l._)("span",{class:"hljs-attr"},"size"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"small"'),(0,l.Uk)(">")]),(0,l.Uk)("\n        往节点 4 后面插入一个节点\n      "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"ki-button"),(0,l.Uk)(">")]),(0,l.Uk)("\n      "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"TJVirtualTree"),(0,l.Uk)("\n        "),(0,l._)("span",{class:"hljs-attr"},"ref"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"tree"'),(0,l.Uk)("\n        "),(0,l._)("span",{class:"hljs-attr"},"show-checkbox"),(0,l.Uk)("\n        "),(0,l._)("span",{class:"hljs-attr"},":visibleCount"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"10"'),(0,l.Uk)("\n        "),(0,l._)("span",{class:"hljs-attr"},":data"),(0,l.Uk)("="),(0,l._)("span",{class:"hljs-string"},'"data"'),(0,l.Uk)("\n      />")]),(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"div"),(0,l.Uk)(">")]),(0,l.Uk)("\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"template"),(0,l.Uk)(">")]),(0,l.Uk)("\n\n  "),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("<"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l._)("span",{class:"javascript"},[(0,l.Uk)("\n    "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" createTreeData = "),(0,l._)("span",{class:"hljs-function"},[(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"},[(0,l.Uk)("\n      maxDeep,\n      maxChildren,\n      minNodesNumber,\n      deep = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(",\n      key = "),(0,l._)("span",{class:"hljs-string"},"'node'"),(0,l.Uk)(",\n    ")]),(0,l.Uk)(") =>")]),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-keyword"},"let"),(0,l.Uk)(" id = "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(";\n      "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"new"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-built_in"},"Array"),(0,l.Uk)("(minNodesNumber).fill(deep).map("),(0,l._)("span",{class:"hljs-function"},"() =>"),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" childrenNumber =\n          deep === maxDeep ? "),(0,l._)("span",{class:"hljs-number"},"0"),(0,l.Uk)(" : "),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".round("),(0,l._)("span",{class:"hljs-built_in"},"Math"),(0,l.Uk)(".random() * maxChildren)\n        "),(0,l._)("span",{class:"hljs-keyword"},"const"),(0,l.Uk)(" nodeKey = "),(0,l._)("span",{class:"hljs-string"},[(0,l.Uk)("`"),(0,l._)("span",{class:"hljs-subst"},"${key}"),(0,l.Uk)("-"),(0,l._)("span",{class:"hljs-subst"},"${id++}"),(0,l.Uk)("`")]),(0,l.Uk)(";\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": nodeKey,\n          "),(0,l._)("span",{class:"hljs-attr"},"children"),(0,l.Uk)(": childrenNumber\n            ? createTreeData(maxDeep, maxChildren, childrenNumber, deep + "),(0,l._)("span",{class:"hljs-number"},"1"),(0,l.Uk)(", nodeKey)\n            : "),(0,l._)("span",{class:"hljs-literal"},"undefined"),(0,l.Uk)(",\n        }\n      })\n    };  \n    \n    "),(0,l._)("span",{class:"hljs-keyword"},"export"),(0,l.Uk)(),(0,l._)("span",{class:"hljs-keyword"},"default"),(0,l.Uk)(" {\n      "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"data"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(")")]),(0,l.Uk)(" {\n        "),(0,l._)("span",{class:"hljs-keyword"},"return"),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-attr"},"data"),(0,l.Uk)(": createTreeData("),(0,l._)("span",{class:"hljs-number"},"3"),(0,l.Uk)(", "),(0,l._)("span",{class:"hljs-number"},"30"),(0,l.Uk)(",  "),(0,l._)("span",{class:"hljs-number"},"40"),(0,l.Uk)("),\n        };\n      },\n        \n      "),(0,l._)("span",{class:"hljs-attr"},"methods"),(0,l.Uk)(": {\n        "),(0,l._)("span",{class:"hljs-function"},[(0,l._)("span",{class:"hljs-title"},"insert"),(0,l.Uk)("("),(0,l._)("span",{class:"hljs-params"}),(0,l.Uk)(")")]),(0,l.Uk)(" {\n          "),(0,l._)("span",{class:"hljs-built_in"},"this"),(0,l.Uk)(".$refs.tree.insertSiblingNodes("),(0,l._)("span",{class:"hljs-string"},"'node-4'"),(0,l.Uk)(", [\n            {\n              "),(0,l._)("span",{class:"hljs-attr"},"id"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-built_in"},"Date"),(0,l.Uk)(".now(),\n              "),(0,l._)("span",{class:"hljs-attr"},"label"),(0,l.Uk)(": "),(0,l._)("span",{class:"hljs-built_in"},"Date"),(0,l.Uk)(".now() + "),(0,l._)("span",{class:"hljs-string"},"'-插入节点'"),(0,l.Uk)(",\n            },\n          ]);\n        },\n      },\n    }\n  ")]),(0,l._)("span",{class:"hljs-tag"},[(0,l.Uk)("</"),(0,l._)("span",{class:"hljs-name"},"script"),(0,l.Uk)(">")]),(0,l.Uk)("\n")])],-1),rs=(0,l.uE)("<h3>Props</h3><table><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>data</td><td>虚拟树展示的数据, 数组中的字段必须和 props 属性相同</td><td>[]</td><td>-</td></tr><tr><td>visibleCount</td><td>可视区域的元素数量</td><td>number</td><td>-</td></tr><tr><td>itemHeight</td><td>元素高度</td><td>number</td><td>30</td></tr><tr><td>defaultExpandedKeys</td><td>默认展开项的 id 数组</td><td>string[]</td><td>[]</td></tr><tr><td>defaultCheckedKeys</td><td>默认选中项的 id 数组</td><td>string[]</td><td>[]</td></tr><tr><td>showCheckbox</td><td>是否显示复选框</td><td>boolean</td><td>false</td></tr><tr><td>emptyText</td><td>空提示</td><td>string</td><td>No Data</td></tr><tr><td>checkStrictly</td><td>在显示复选框的情况下，是否严格的遵循父子不互相关联的做法</td><td>boolean</td><td>false</td></tr><tr><td>indent</td><td>相邻级节点间的水平缩进, 单位为像素</td><td>number</td><td>15</td></tr><tr><td>load</td><td>懒加载子节点数据, 该函数会接受两个参数 (node, resolve), node 为当前展开节点, resolve 用于传递节点数据, 懒加载是组件无法确定是否有子节点可以进行懒加载, 所以使用时需要提供一个 loading 字段来标识是否可以进行加载, 它是一个 boolean 值, true 代表可以进行加载</td><td>function</td><td>-</td></tr><tr><td>props</td><td>定义 data 中的字段属性 key, 详情看下方 props</td><td>object</td><td>-</td></tr></tbody></table><h3>props</h3><p>组件会根据 props 中定义的索引, 从 data 中获取树节点数据, 它的默认值是 <code>{ value: &#39;id&#39;, label: &#39;label&#39;, children: &#39;children&#39;, loading: &#39;loading&#39;}</code> , 如果你的数据格式不是这个样子的, 你可以传递 props 进行修改.</p><table><thead><tr><th>属性</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>节点唯一标识的索引</td><td>string</td><td>id</td></tr><tr><td>label</td><td>节点页面展示 label 的索引</td><td>string</td><td>label</td></tr><tr><td>children</td><td>子节点数组的索引</td><td>string</td><td>children</td></tr><tr><td>loading</td><td>在懒加载中用于标识是否可以懒加载的索引</td><td>string</td><td>loading</td></tr></tbody></table><h3>Events</h3><table><thead><tr><th>事件名称</th><th>说明</th><th>回调函数</th></tr></thead><tbody><tr><td>node-expand</td><td>节点展开时触发</td><td>node</td></tr><tr><td>node-collapse</td><td>节点折叠时触发</td><td>node</td></tr><tr><td>check</td><td>复选框被点击的时候触发</td><td>( node, checked)</td></tr><tr><td>node-click</td><td>节点点击时触发</td><td>(node, event)</td></tr><tr><td>node-contextmenu</td><td>节点右击触发</td><td>(node, event)</td></tr></tbody></table><h3>Methods</h3><table><thead><tr><th>方法名</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>getCheckedKeys</td><td>获取选中节点的 id 数组</td><td>-</td></tr><tr><td>getHalfCheckedKeys</td><td>获取半选中节点的 id 数组</td><td>-</td></tr><tr><td>getExpandedKeys</td><td>获取展开节点的 id 数组</td><td>-</td></tr><tr><td>getCheckedNodes</td><td>获取选中节点数组</td><td>-</td></tr><tr><td>getExpandedNodes</td><td>获取展开节点数组</td><td>-</td></tr><tr><td>getHalfCheckedNodes</td><td>获取半选中节点数组</td><td>-</td></tr><tr><td>setExpandedKeys</td><td>设置展开节点</td><td>(string / number)[]</td></tr><tr><td>setCheckedKeys</td><td>设置选中节点</td><td>(string / number)[]</td></tr><tr><td>insertSiblingNodes</td><td>插入节点, 它需要一个参照节点和插入节点数组, 最后会将其插入到参照节点后面</td><td>(key, node[])</td></tr><tr><td>setData</td><td>重新设置 tree data</td><td>node[]</td></tr></tbody></table><h3>Slots</h3><table><thead><tr><th>插槽</th><th>说明</th><th>参数</th></tr></thead><tbody><tr><td>default</td><td>默认插槽, 用于自定义渲染节点</td><td>node 节点信息</td></tr><tr><td>icon</td><td>自定义节点的 icon 图标</td><td>-</td></tr><tr><td>empty</td><td>空提示插槽</td><td>-</td></tr></tbody></table>",11);function ds(s,a){var n=Object.keys(s);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(s);a&&(l=l.filter((function(a){return Object.getOwnPropertyDescriptor(s,a).enumerable}))),n.push.apply(n,l)}return n}function cs(s){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?ds(Object(n),!0).forEach((function(a){ps(s,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(n)):ds(Object(n)).forEach((function(a){Object.defineProperty(s,a,Object.getOwnPropertyDescriptor(n,a))}))}return s}function ps(s,a,n){return a in s?Object.defineProperty(s,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):s[a]=n,s}n(1249),n(3290),n(2222),n(7941),n(2526),n(7327),n(5003),n(4747),n(9337);const hs={name:"component-doc",components:{"ki-demo0":(ks=function s(a,n,l){var t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,e=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"node",r=1;return new Array(l).fill(t).map((function(){var l=t===a?0:Math.round(Math.random()*n),d="".concat(e,"-").concat(r++);return{id:d,label:d,children:l?s(a,n,l,t+1,d):void 0}}))},cs({render:function(s,a){var n=(0,l.up)("TJVirtualTree");return(0,l.wg)(),_createElementBlock("div",null,[(0,l.Wm)(n,{visibleCount:10,data:s.data},null,8,["data"])])}},{data:function(){return{data:ks(3,30,40)}}})),"ki-demo1":function(){var s=function s(a,n,l){var t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,e=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"node",r=1;return new Array(l).fill(t).map((function(){var l=t===a?0:Math.round(Math.random()*n),d="".concat(e,"-").concat(r++);return{id:d,label:d,children:l?s(a,n,l,t+1,d):void 0}}))};return cs({render:function(s,a){var n=(0,l.up)("TJVirtualTree");return(0,l.wg)(),_createElementBlock("div",null,[(0,l.Wm)(n,{visibleCount:10,"show-checkbox":"",data:s.data},null,8,["data"])])}},{data:function(){return{data:s(3,30,40)}}})}(),"ki-demo2":function(){var s=function s(a,n,l){var t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,e=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"node",r=1;return new Array(l).fill(t).map((function(){var l=t===a?0:Math.round(Math.random()*n),d="".concat(e,"-").concat(r++);return{id:d,label:d,children:l?s(a,n,l,t+1,d):void 0}}))};return cs({render:function(s,a){var n=(0,l.up)("TJVirtualTree");return(0,l.wg)(),_createElementBlock("div",null,[(0,l.Wm)(n,{"show-checkbox":"",visibleCount:10,"default-expanded-keys":["node-1","node-2"],"default-checked-keys":["node-1"],data:s.data},null,8,["data"])])}},{data:function(){return{data:s(3,30,40)}}})}(),"ki-demo3":function(){var s={style:{width:"100%",display:"flex","justify-content":"space-between"}},a=_createElementVNode("div",{style:{opacity:"0"}},"node.label",-1),n=_createElementVNode("div",{style:{"font-size":"14px","margin-right":"10px"}},[_createElementVNode("a",null,"编辑"),_createElementVNode("a",{style:{color:"#ed5a65","margin-left":"10px"}},"删除")],-1),e=function s(a,n,l){var t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,e=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"node",r=1;return new Array(l).fill(t).map((function(){var l=t===a?0:Math.round(Math.random()*n),d="".concat(e,"-").concat(r++);return{id:d,label:d,children:l?s(a,n,l,t+1,d):void 0}}))};return cs({render:function(e,r){var d=(0,l.up)("TJVirtualTree");return(0,l.wg)(),_createElementBlock("div",null,[(0,l.Wm)(d,{visibleCount:10,"show-checkbox":"",data:e.data},{default:(0,l.w5)((function(e){var r=e.node;return[_createElementVNode("div",s,[(0,l.Uk)(" 👻 "+(0,t.zw)(r&&r.label)+" ",1),a,n])]})),_:1},8,["data"])])}},{data:function(){return{data:e(3,30,40)}}})}(),"ki-demo4":function(){var s=1,a=function a(n,l,t){var e=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,d=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"node";return new Array(t).fill(r).map((function(){var t=r===n?0:Math.round(Math.random()*l),c="".concat(d,"-").concat(s++);return{id:c,label:c,loading:!!e&&!!Math.floor(2*Math.random()),children:t?a(n,l,t,e,r+1,c):void 0}}))};return cs({render:function(s,a){var n=(0,l.up)("TJVirtualTree");return(0,l.wg)(),_createElementBlock("div",null,[(0,l.Wm)(n,{visibleCount:10,load:s.load},null,8,["load"])])}},{methods:{load:function(s,n){if(0===s.level)return n(a(1,0,40,!0));setTimeout((function(){n(a(1,0,1e3,!0))}),2e3)}}})}(),"ki-demo5":function(){var s=(0,l.Uk)(" 往节点 4 后面插入一个节点 "),a=function s(a,n,l){var t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,e=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"node",r=1;return new Array(l).fill(t).map((function(){var l=t===a?0:Math.round(Math.random()*n),d="".concat(e,"-").concat(r++);return{id:d,label:d,children:l?s(a,n,l,t+1,d):void 0}}))};return cs({render:function(a,n){var t=(0,l.up)("ki-button"),e=(0,l.up)("TJVirtualTree");return(0,l.wg)(),_createElementBlock("div",null,[_createElementVNode("div",null,[(0,l.Wm)(t,{onClick:a.insert,type:"primary",size:"small"},{default:(0,l.w5)((function(){return[s]})),_:1},8,["onClick"]),(0,l.Wm)(e,{ref:"tree","show-checkbox":"",visibleCount:10,data:a.data},null,8,["data"])])])}},{data:function(){return{data:a(3,30,40)}},methods:{insert:function(){this.$refs.tree.insertSiblingNodes("node-4",[{id:Date.now(),label:Date.now()+"-插入节点"}])}}})}()}};var ks;hs.render=function(s,a,n,ds,cs,ps){var hs=(0,l.up)("ki-demo0"),ks=(0,l.up)("demo-block"),os=(0,l.up)("ki-demo1"),is=(0,l.up)("ki-demo2"),_s=(0,l.up)("ki-demo3"),Us=(0,l.up)("ki-demo4"),us=(0,l.up)("ki-demo5");return(0,l.wg)(),(0,l.iD)("section",null,[e,(0,l.Wm)(ks,null,{source:(0,l.w5)((function(){return[(0,l.Wm)(hs)]})),default:(0,l.w5)((function(){return[r]})),_:1}),d,c,(0,l.Wm)(ks,null,{source:(0,l.w5)((function(){return[(0,l.Wm)(os)]})),default:(0,l.w5)((function(){return[p]})),_:1}),h,k,(0,l.Wm)(ks,null,{source:(0,l.w5)((function(){return[(0,l.Wm)(is)]})),default:(0,l.w5)((function(){return[o]})),_:1}),i,_,(0,l.Wm)(ks,null,{description:(0,l.w5)((function(){return[U]})),source:(0,l.w5)((function(){return[(0,l.Wm)(_s)]})),default:(0,l.w5)((function(){return[(0,l._)("pre",null,[(0,l._)("code",u,[j,m,b,y,g,f,w,v,(0,l.Uk)("\n          👻 "+(0,t.zw)(s.node&&s.node.label)+"\n          ",1),x,N,T,D,C,K,M,V,E,$,W,O,A,J,P,S,z,B,H,L,q,F,G,I,Q,R,X,Y])])]})),_:1}),Z,ss,(0,l.Wm)(ks,null,{description:(0,l.w5)((function(){return[as]})),source:(0,l.w5)((function(){return[(0,l.Wm)(Us)]})),default:(0,l.w5)((function(){return[ns]})),_:1}),ls,ts,(0,l.Wm)(ks,null,{source:(0,l.w5)((function(){return[(0,l.Wm)(us)]})),default:(0,l.w5)((function(){return[es]})),_:1}),rs])};const os=hs}}]);